Generators gen;
    gen.set_terminators(

            "IDENTIFIER CONSTANT STRING_LITERAL sizeof "
            "-> ++ -- << >> <= >= == != "
            "&& || *= /= %= += "
            "-= <<= >>= &= "
            "^= |= TYPE_NAME "

            "typedef extern static auto register "
            "char short int long signed unsigned float double const volatile void "
            "struct union enum ... "

            "case default if else switch while do for goto continue break return "
            "( ) [ ] { } . -> , & | ^ + - * / ~ % ! < > ? : = ;"

    );

    gen.set_non_terminators(
            "primary_expression postfix_expression argument_expression_list unary_expression unary_operator "
            "cast_expression multiplicative_expression additive_expression shift_expression relational_expression "
            "equality_expression and_expression exclusive_or_expression inclusive_or_expression logical_and_expression "
            "logical_or_expression conditional_expression assignment_expression assignment_operator expression "
            "constant_expression declaration declaration_specifiers init_declarator_list init_declarator "
            "storage_class_specifier type_specifier struct_or_union_specifier struct_or_union struct_declaration_list "
            "struct_declaration specifier_qualifier_list struct_declarator_list struct_declarator "
            "enum_specifier enumerator_list enumerator type_qualifier declarator direct_declarator pointer "
            "type_qualifier_list parameter_type_list parameter_list parameter_declaration identifier_list "
            "type_name abstract_declarator direct_abstract_declarator initializer initializer_list statement "
            "labeled_statement compound_statement declaration_list statement_list expression_statement "
            "selection_statement iteration_statement jump_statement translation_unit external_declaration "
            "function_definition");

    gen.set_start("translation_unit");


    gen.add("primary_expression")
    | "IDENTIFIER"
    | "CONSTANT"
    | "STRING_LITERAL"
    | "( expression )"
            ;

    gen.add("postfix_expression")
    | "primary_expression"
    | "postfix_expression [ expression ]"
    | "postfix_expression ( )"
    | "postfix_expression ( argument_expression_list )"
    | "postfix_expression . IDENTIFIER"
    | "postfix_expression -> IDENTIFIER"
    | "postfix_expression ++"
    | "postfix_expression --"
            ;

    gen.add("argument_expression_list")
    | "assignment_expression"
    | "argument_expression_list , assignment_expression"
            ;

    gen.add("unary_expression")
    | "postfix_expression"
    | "++ unary_expression"
    | "-- unary_expression"
    | "unary_operator cast_expression"
    | "sizeof unary_expression"
    | "sizeof ( type_name )"
            ;

    gen.add("unary_operator")
    | "&"
    | "*"
    | "+"
    | "-"
    | "~"
    | "!"
            ;

    gen.add("cast_expression")
    | "unary_expression"
    | "( type_name ) cast_expression"
            ;

    gen.add("multiplicative_expression")
    | "cast_expression"
    | "multiplicative_expression * cast_expression"
    | "multiplicative_expression / cast_expression"
    | "multiplicative_expression % cast_expression"
            ;

    gen.add("additive_expression")
    | "multiplicative_expression"
    | "additive_expression + multiplicative_expression"
    | "additive_expression - multiplicative_expression"
            ;

    gen.add("shift_expression")
    | "additive_expression"
    | "shift_expression << additive_expression"
    | "shift_expression >> additive_expression"
            ;

    gen.add("relational_expression")
    | "shift_expression"
    | "relational_expression < shift_expression"
    | "relational_expression > shift_expression"
    | "relational_expression <= shift_expression"
    | "relational_expression >= shift_expression"
            ;

    gen.add("equality_expression")
    | "relational_expression"
    | "equality_expression == relational_expression"
    | "equality_expression != relational_expression"
            ;

    gen.add("and_expression")
    | "equality_expression"
    | "and_expression & equality_expression"
            ;

    gen.add("exclusive_or_expression")
    | "and_expression"
    | "exclusive_or_expression ^ and_expression"
            ;

    gen.add("inclusive_or_expression")
    | "exclusive_or_expression"
    | "inclusive_or_expression | exclusive_or_expression"
            ;

    gen.add("logical_and_expression")
    | "inclusive_or_expression"
    | "logical_and_expression && inclusive_or_expression"
            ;

    gen.add("logical_or_expression")
    | "logical_and_expression"
    | "logical_or_expression || logical_and_expression"
            ;

    gen.add("conditional_expression")
    | "logical_or_expression"
    | "logical_or_expression ? expression : conditional_expression"
            ;

    gen.add("assignment_expression")
    | "conditional_expression"
    | "unary_expression assignment_operator assignment_expression"
            ;

    gen.add("assignment_operator")
    | "="
    | "*="
    | "/="
    | "%="
    | "+="
    | "-="
    | "<<="
    | ">>="
    | "&="
    | "^="
    | "|="
            ;

    gen.add("expression")
    | "assignment_expression"
    | "expression , assignment_expression"
            ;

    gen.add("constant_expression")
    | "conditional_expression"
            ;

    gen.add("declaration")
    | "declaration_specifiers ;"
    | "declaration_specifiers init_declarator_list ;"
            ;

    gen.add("declaration_specifiers")
    | "storage_class_specifier"
    | "storage_class_specifier declaration_specifiers"
    | "type_specifier"
    | "type_specifier declaration_specifiers"
    | "type_qualifier"
    | "type_qualifier declaration_specifiers"
            ;

    gen.add("init_declarator_list")
    | "init_declarator"
    | "init_declarator_list , init_declarator"
            ;

    gen.add("init_declarator")
    | "declarator"
    | "declarator = initializer"
            ;

    gen.add("storage_class_specifier")
    | "typedef"
    | "extern"
    | "static"
    | "auto"
    | "register"
            ;

    gen.add("type_specifier")
    | "void"
    | "char"
    | "short"
    | "int"
    | "long"
    | "float"
    | "double"
    | "signed"
    | "unsigned"
    | "struct_or_union_specifier"
    | "enum_specifier"
    | "TYPE_NAME"
            ;

    gen.add("struct_or_union_specifier")
    | "struct_or_union IDENTIFIER { struct_declaration_list }"
    | "struct_or_union { struct_declaration_list }"
    | "struct_or_union IDENTIFIER"
            ;

    gen.add("struct_or_union")
    | "struct"
    | "union"
            ;

    gen.add("struct_declaration_list")
    | "struct_declaration"
    | "struct_declaration_list struct_declaration"
            ;

    gen.add("struct_declaration")
    | "specifier_qualifier_list struct_declarator_list ;"
            ;

    gen.add("specifier_qualifier_list")
    | "type_specifier specifier_qualifier_list"
    | "type_specifier"
    | "type_qualifier specifier_qualifier_list"
    | "type_qualifier"
            ;

    gen.add("struct_declarator_list")
    | "struct_declarator"
    | "struct_declarator_list , struct_declarator"
            ;

    gen.add("struct_declarator")
    | "declarator"
    | ": constant_expression"
    | "declarator : constant_expression"
            ;

    gen.add("enum_specifier")
    | "enum { enumerator_list }"
    | "enum IDENTIFIER { enumerator_list }"
    | "enum IDENTIFIER"
            ;

    gen.add("enumerator_list")
    | "enumerator"
    | "enumerator_list , enumerator"
            ;

    gen.add("enumerator")
    | "IDENTIFIER"
    | "IDENTIFIER = constant_expression"
            ;

    gen.add("type_qualifier")
    | "const"
    | "volatile"
            ;

    gen.add("declarator")
    | "pointer direct_declarator"
    | "direct_declarator"
            ;

    gen.add("direct_declarator")
    | "IDENTIFIER"
    | "( declarator )"
    | "direct_declarator [ constant_expression ]"
    | "direct_declarator [ ]"
    | "direct_declarator ( parameter_type_list )"
    | "direct_declarator ( identifier_list )"
    | "direct_declarator ( )"
            ;

    gen.add("pointer")
    | "*"
    | "* type_qualifier_list"
    | "* pointer"
    | "* type_qualifier_list pointer"
            ;

    gen.add("type_qualifier_list")
    | "type_qualifier"
    | "type_qualifier_list type_qualifier"
            ;


    gen.add("parameter_type_list")
    | "parameter_list"
    | "parameter_list , ..."
            ;

    gen.add("parameter_list")
    | "parameter_declaration"
    | "parameter_list , parameter_declaration"
            ;

    gen.add("parameter_declaration")
    | "declaration_specifiers declarator"
    | "declaration_specifiers abstract_declarator"
    | "declaration_specifiers"
            ;

    gen.add("identifier_list")
    | "IDENTIFIER"
    | "identifier_list , IDENTIFIER"
            ;

    gen.add("type_name")
    | "specifier_qualifier_list"
    | "specifier_qualifier_list abstract_declarator"
            ;

    gen.add("abstract_declarator")
    | "pointer"
    | "direct_abstract_declarator"
    | "pointer direct_abstract_declarator"
            ;

    gen.add("direct_abstract_declarator")
    | "( abstract_declarator )"
    | "[ ]"
    | "[ constant_expression ]"
    | "direct_abstract_declarator [ ]"
    | "direct_abstract_declarator [ constant_expression ]"
    | "( )"
    | "( parameter_type_list )"
    | "direct_abstract_declarator ( )"
    | "direct_abstract_declarator ( parameter_type_list )"
            ;

    gen.add("initializer")
    | "assignment_expression"
    | "{ initializer_list }"
    | "{ initializer_list , }"
            ;

    gen.add("initializer_list")
    | "initializer"
    | "initializer_list , initializer"
            ;

    gen.add("statement")
    | "labeled_statement"
    | "compound_statement"
    | "expression_statement"
    | "selection_statement"
    | "iteration_statement"
    | "jump_statement"
            ;

    gen.add("labeled_statement")
    | "IDENTIFIER : statement"
    | "case constant_expression : statement"
    | "default : statement"
            ;

    gen.add("compound_statement")
    | "{ }"
    | "{ statement_list }"
    | "{ declaration_list }"
    | "{ declaration_list statement_list }"
            ;

    gen.add("declaration_list")
    | "declaration"
    | "declaration_list declaration"
            ;

    gen.add("statement_list")
    | "statement"
    | "statement_list statement"
            ;

    gen.add("expression_statement")
    | ";"
    | "expression ;"
            ;

    gen.add("selection_statement")
    | "if ( expression ) statement"
    | "if ( expression ) statement else statement"
    | "switch ( expression ) statement"
            ;

    gen.add("iteration_statement")
    | "while ( expression ) statement"
    | "do statement while ( expression ) ;"
    | "for ( expression_statement expression_statement ) statement"
    | "for ( expression_statement expression_statement expression ) statement"
            ;

    gen.add("jump_statement")
    | "goto IDENTIFIER ;"
    | "continue ;"
    | "break ;"
    | "return ;"
    | "return expression ;"
            ;

    gen.add("translation_unit")
    | "external_declaration"
    | "translation_unit external_declaration"
            ;

    gen.add("external_declaration")
    | "function_definition"
    | "declaration"
            ;

    gen.add("function_definition")
    | "declaration_specifiers declarator declaration_list compound_statement"
    | "declaration_specifiers declarator compound_statement"
    | "declarator declaration_list compound_statement"
    | "declarator compound_statement"
            ;
    return gen;